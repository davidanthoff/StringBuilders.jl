name: Reusable workflow example

on:
  workflow_call:
    secrets:
      codecov_token:
        required: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/julia-lint@main
  run-tests:
    strategy:
        fail-fast: false
        matrix:
          os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: julia-actions/install-juliaup@v2
      with:
        channel: "release"
    - name: Compute channels from Project.toml bounds
      id: compute_juliaup_channels
      run: julia ./versionlogic/versionlogic.jl
    - name: Install Julia versions
      run: |
        $channels = "${{ steps.compute_juliaup_channels.outputs.juliaup_channels }}".Split(",", [System.StringSplitOptions]::TrimEntries)
        $channels | % {juliaup add $_}        
      shell: pwsh
    - name: Clone registries
      run: |
        $channels = "${{ steps.compute_juliaup_channels.outputs.juliaup_channels }}".Split(",", [System.StringSplitOptions]::TrimEntries)

        $channels | % {
          $Env:JULIA_DEPOT_PATH = "${{ runner.tool_cache }}/juliadepots/julia-$_"
          
          julia +$_ --project=. -e 'using Pkg; Pkg.Registry.add("General")'
        }
      shell: pwsh
    - name: Instantiate and precompile
      run: |
        $channels = "${{ steps.compute_juliaup_channels.outputs.juliaup_channels }}".Split(",", [System.StringSplitOptions]::TrimEntries)

        $channels | % {
          $Env:JULIA_DEPOT_PATH = "${{ runner.tool_cache }}/juliadepots/julia-$_"
          
          julia +$_ --project=. --code-coverage=user --startup-file=no --history-file=no --depwarn=no -e 'using Pkg; Pkg.instantiate()'
        }
      shell: pwsh
    - name: Install test runner
      run: julia --project=./testrunner -e 'using Pkg; Pkg.instantiate()'
    - name: Run tests
      run: |
        $channels = "${{ steps.compute_juliaup_channels.outputs.juliaup_channels }}".Split(",", [System.StringSplitOptions]::TrimEntries)

        julia --project=./testrunner ./testrunner/main.jl ${{ runner.tool_cache }} @channels
      shell: pwsh
    - uses: julia-actions/julia-processcoverage@v1
      if: always()
    - uses: codecov/codecov-action@v4
      if: always()
      with:
        files: ./lcov.info
        flags: unittests
        token: ${{ secrets.codecov_token }}

  deploy-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-docdeploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
