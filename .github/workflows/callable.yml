name: Reusable workflow example

on:
  workflow_call:

jobs:
  test:
    strategy:
        matrix:
          os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Trust PSGallery
      run: |
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
      shell: pwsh
    - uses: potatoqualitee/psmodulecache@v6.0
      with:
        modules-to-cache: PSToml
    - uses: actions/checkout@v4
    - name: Compute channels from Project.toml bounds
      run: |
        $project = Get-Content Project.toml | ConvertFrom-Toml

        $minJulia = $project.compat.julia

        echo "Min Julia is $minJulia"
      shell: pwsh
    - uses: julia-actions/install-juliaup@v2
      with:
        channel: "release"
    - name: Install Julia versions
      run: |
        $channels = "1.6", "1.10"
        $channels | % {juliaup add $_}        
      shell: pwsh
    - name: Clone registries
      run: |
        $channels = "1.6", "1.10"

        $channels | % {
          $Env:JULIA_DEPOT_PATH = "${{ runner.tool_cache }}/juliadepots/julia-$_"
          
          julia +$_ --project=. -e 'using Pkg; Pkg.Registry.add("General")'
        }
      shell: pwsh
    - name: Instantiate
      run: |
        $channels = "1.6", "1.10"

        $channels | % {
          $Env:JULIA_DEPOT_PATH = "${{ runner.tool_cache }}/juliadepots/julia-$_"
          
          julia +$_ --project=. -e 'using Pkg; Pkg.instantiate()'
        }
      shell: pwsh
    - name: Install test runner
      run: julia --project=./testrunner -e 'using Pkg; Pkg.instantiate()'
    - name: Run tests
      run: |
        $channels = "1.6", "1.10"

        julia --project=./testrunner ./testrunner/main.jl ${{ runner.tool_cache }} @channels
      shell: pwsh
