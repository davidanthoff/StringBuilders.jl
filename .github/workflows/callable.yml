name: Reusable workflow example

on:
  workflow_call:

jobs:
  test:
    strategy:
        matrix:
          os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Compute channels from Project.toml bounds
      run: |
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        Install-Module -Name PSToml -Scope CurrentUser

        $project = Get-Content Project.toml | ConvertFrom-Toml

        $minJulia = $project.compat.julia

        echo "Min Julia is $minJulia"
      shell: pwsh
    - uses: julia-actions/install-juliaup@v2
      with:
        channel: "release"
    - name: Install Julia versions
      run: |
        $channels = "1.6", "1.10"
        $channels | % {juliaup add $_}        
      shell: pwsh
    - uses: samypr100/setup-dev-drive@v3
      with:
        mount-path: "${{ runner.tool_cache }}/juliadepots"
        drive-size: 10GB
    - name: Clone registries
      run: |
        $channels = "1.6", "1.10"

        $channels | % {
          $Env:JULIA_DEPOT_PATH = "${{ runner.tool_cache }}/juliadepots/julia-$_"
          
          julia +$_ --project=. -e 'using Pkg; Pkg.Registry.add("General")'
        }
      shell: pwsh
    - name: Instantiate
      run: |
        $channels = "1.6", "1.10"

        $channels | % {
          $Env:JULIA_DEPOT_PATH = "${{ runner.tool_cache }}/juliadepots/julia-$_"
          
          julia +$_ --project=. -e 'using Pkg; Pkg.instantiate()'
        }
      shell: pwsh
    - name: Run tests
      run: |
        $channels = "1.6", "1.10"


        $channels | % {
          $Env:JULIA_DEPOT_PATH = "${{ runner.tool_cache }}/juliadepots/julia-$_"
          
          julia +$_ --project=. -e 'using Pkg; Pkg.test()'
        }
      shell: pwsh
